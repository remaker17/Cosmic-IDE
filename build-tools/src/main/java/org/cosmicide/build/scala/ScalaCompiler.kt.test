/*
 * This file is part of Cosmic IDE.
 * Cosmic IDE is a free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 * Cosmic IDE is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License along with Cosmic IDE. If not, see <https://www.gnu.org/licenses/>.
 */

package org.cosmicide.build.scala

import dotty.tools.MainGenericCompiler
import org.cosmicide.build.BuildReporter
import org.cosmicide.build.Task
import org.cosmicide.build.util.getSystemClasspath
import org.cosmicide.project.Project
import java.io.File
import java.io.OutputStream
import java.io.PrintStream

class ScalaCompileTask(val project: Project) : Task {
    override fun execute(reporter: BuildReporter) {
        val sourceDir = project.srcDir
        val outputDir = project.binDir.resolve("classes")

        val sourceFiles = getSourceFiles(sourceDir)
        if (sourceFiles.isEmpty()) {
            reporter.reportInfo("No Scala files found. Skipping compilation.")
            return
        }

        reporter.reportInfo("Compiling Scala files...")
        val sysOut = System.out
        val sysErr = System.err

        System.setOut(PrintStream(object : OutputStream() {
            val sb = StringBuilder()
            override fun write(p0: Int) {
                sb.append(p0)
            }

            override fun flush() {
                reporter.reportInfo(sb.toString())
                super.flush()
            }
        }))

        System.setErr(PrintStream(object : OutputStream() {
            val sb = StringBuilder()
            override fun write(p0: Int) {
                sb.append(p0)
            }

            override fun flush() {
                reporter.reportError(sb.toString())
                super.flush()
            }

        }))

        MainGenericCompiler.main(
            arrayOf(
                "-classpath",
                getSystemClasspath().joinToString(File.pathSeparator),
                "-d",
                outputDir.absolutePath,
                *sourceFiles.toTypedArray()
            )
        )
        reporter.reportInfo("Compilation successful!")
    }

    fun getSourceFiles(directory: File): List<String> {
        return directory.walk().filter { file -> file.extension == "scala" }
            .map(File::getAbsolutePath).toList()
    }
}
